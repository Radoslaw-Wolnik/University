$ sudo apt install build-essential
gcc ProgramName.c -o ExecutionFileName
./ExecutionFileName


 stdlib.h

    system - wykonuje polecenie systemowe.
    malloc - rezerwuje pamięć.
    calloc - rezerwuje pamięć zerując bity.
    realloc - zmienia rozmiar zarezerwowanej pamięci.
    free - zwalnia obszar pamięci.


 stdio.h

    printf - wypisuje tekst na ekran.
    perror - wypisuje tekst na ekran (na strumień błędów).
    scanf - pobiera dane od użytkownika.
    fopen - otwiera plik.
    freopen - otwiera plik ze wskazanym strumieniem.
    fprintf - wpisuje tekst do pliku.
    fscanf - pobiera wartość zmiennej z pliku.
    fgetc - pobiera znak (na jednym bajcie) z pliku.
    fclose - zamyka plik.
    popen - rozpoczyna uruchomienie polecenia systemowe w tle i przekierowuje wyjście do strumienia potokowego.
    pclose - zamyka strumień potokowy.



1. ---------------------- Zadanie 1 ----------------------

include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *file;
    int number;
    int max, min;
    
    file = fopen("liczby.txt", "r");

    if (file == NULL) {
        fprintf(stderr, "Nie udalo sie otworzysc pliku\n");
        return 1;
    }

    if (fscanf(file, "%d", &number) != 1) {
        fprintf(stderr, "Nie udalo sie sczytac czegokolwiek z pliku\n");
        fclose(file);
        return 1;
    }

    max = number;
    min = number;

    // Loop through the rest of the numbers in the file
  while (fscanf(file, "%d", &number) == 1) {
        // Update largest and smallest
        if (number > max) {
            max = number;
        } else if (number < min) {
            min = number;
        }
    }

    fclose(file);

    // Display the results
    printf("Largest number: %d\n", max);
    printf("Smallest number: %d\n", min);

    return 0;
}


2. ---------------------- Zadanie 2 ----------------------

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;

    // Uzytkownik wpisuje ile liczb nalezy pobrac
    printf("Wpisz ile liczb chcesz podac (int): ");
    scanf("%d", &n);

    // Sprawdz czy n jest poprawne
    if (n <= 0) {
        fprintf(stderr, "Niepoprawna liczba, nalezy podac liczbe dodatnia.\n");
        return 1;
    }

    FILE *negatywnyF, *pozytywnyF;

    // Otworz lub utworz pliki
    negatywnyF = fopen("ujemne.txt", "w");
    pozytywnyF = fopen("dodatnie.txt", "w");

    if (negatywnyF == NULL || pozytywnyF == NULL) {
        fprintf(stderr, "Niepoprawne otworzenie plikow\n");
        return 1;
    }

    int number;
    for (int i = 0; i < n; i++) {
        printf("Podaj liczbe calkowita #%d: ", i + 1);
        scanf("%d", &number);

        if (number == 0) {
            fprintf(stderr, "Error: Nie mozna podawac Zera, podaj dowolna inna calkowita liczbe.\n");
            fclose(negatywnyF);
            fclose(pozytywnyF);
            return 1; // Return an error code
        }

        if (number < 0) {
            fprintf(negatywnyF, "%d\n", number);
        } else {
            fprintf(pozytywnyF, "%d\n", number);
        }
    }

    fclose(negatywnyF);
    fclose(pozytywnyF);

    printf("Liczbby zostaly zapisane pomyslnie.\n");

    return 0;
}


3. ---------------------- Zadanie 3 ----------------------

#include <stdio.h>
#include <string.h>

int main() {
    char str1[100], str2[100];

    printf("Podaj pierwszy napis: ");
    scanf("%s", str1);

    printf("Podaj drugi napis: ");
    scanf("%s", str2);

    FILE *wczesniejszyPlik, *dluzszyPlik;

    // Open files for writing
    wczesniejszyPlik = fopen("wczesniej.txt", "w");
    dluzszyPlik = fopen("dluzszy.txt", "w");

    if (wczesniejszyPlik == NULL || dluzszyPlik == NULL) {
        fprintf(stderr, "Nie udalo sie otworzyc plikow\n");
        return 1;
    }

    // Sprawdz ktory jest pierwszy
    int wczesniej = strcmp(str1, str2);
    if (wczesniej < 0) {
        fprintf(wczesniejszyPlik, "%s\n", str1);
    } 
    else if (wczesniej > 0) {
        fprintf(wczesniejszyPlik, "%s\n", str2);
    } 
    else {
        fprintf(stderr, "Napisy sa identyczne.\n");
        fclose(wczesniejszyPlik);
        fclose(dluzszyPlik);
        return 1;
    }

    // Sprawdz ktory jest dluzszy
    int dlugoscOba = strlen(str1) - strlen(str2);
    if (dlugoscOba > 0) {
        fprintf(dluzszyPlik, "%s\n", str1);
    } 
    else if (dlugoscOba < 0) {
        fprintf(dluzszyPlik, "%s\n", str2);
    } 
    else {
        fprintf(stderr, "Error: Napisy sa tej samej dlugosci.\n");
        fclose(wczesniejszyPlik);
        fclose(dluzszyPlik);
        return 1;
    }

    fclose(wczesniejszyPlik);
    fclose(dluzszyPlik);

    return 0;
}


4. ---------------------- Zadanie 4 ----------------------

#include <stdio.h>
#include <string.h>

// funkcja sprawdzajaca czy napis ma tylko ma literki
int isAlphabetic(const char *str) {
    while (*str) {
        char ch = *str;
        if (!((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'))) {
            return 0;
        }
        str++;
    }
    return 1; // wszystko ok
}

int main() {
    char name[50], surname[50];
    char buffer[100];

    printf("Enter name: ");
    scanf("%s", name);

    printf("Enter surname: ");
    scanf("%s", surname);

    if (!isAlphabetic(name) || !isAlphabetic(surname)) {
        fprintf(stderr, "Error: Name and surname should contain only letters.\n");
        return 1;
    }

    FILE *file = fopen("baza.txt", "r");

   
    if (file == NULL) {
        fprintf(stderr, "Error opening the file\n");
        return 1;
    }

    int found = 0;

    while (fgets(buffer, sizeof(buffer), file) != NULL) {
        // Separate the line into name and surname
        char file_name[50], file_surname[50];
        sscanf(buffer, "%s %s", file_name, file_surname);

        if (strcmp(name, file_name) == 0) {
            found = 1;
            break;
        }
    }

    fclose(file);

    if (found) {
        printf("The name %s is in the file.\n", name);
    } else {
        printf("The name %s is not in the file.\n", name);
    }

    return 0;
}


5. ---------------------- Zadanie 5 ----------------------

#include <stdio.h>

int main() {

    FILE *file = fopen("przedmioty.txt", "w");
    if (file == NULL) {
        fprintf(stderr, "Error opening the file for writing\n");
        return 1;
    }

    fprintf(file, "Informatyka\nMatematyka\nJezyk angielski\n");
    fclose(file);
    printf("Content written to przedmioty.txt successfully.\n");

    return 0;
}


6. ---------------------- Zadanie 6 ----------------------

#include <stdio.h>
#include <stdlib.h>

int main() {
    // Menu
    printf("1. Delete przedmioty.txt\n");
    printf("2. Copy przedmioty.txt to Other folder\n");
    printf("3. Move przedmioty.txt to Other folder\n");
    printf("Enter your choice (1, 2, or 3): ");

    int choice;
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            // Delete przedmioty.txt
            if (rm("przedmioty.txt") == 0) {
                printf("File przedmioty.txt deleted successfully.\n");
            } else {
                fprintf(stderr, "Error deleting file przedmioty.txt\n");
            }
            break;

        case 2:
            // Cp przedmioty.txt to Other folder unix cp win copy
            if (system("cp przedmioty.txt Other\\") == 0) {
                printf("File przedmioty.txt copied to Other folder successfully.\n");
            } else {
                fprintf(stderr, "Error copying file przedmioty.txt\n");
            }
            break;

        case 3:
            // Move przedmioty.txt to Other folder
            if (mv("przedmioty.txt", "Other\\przedmioty.txt") == 0) {
                printf("File przedmioty.txt moved to Other folder successfully.\n");
            } else {
                fprintf(stderr, "Error moving file przedmioty.txt\n");
            }
            break;

        default:
            fprintf(stderr, "Invalid choice. Please enter 1, 2, or 3.\n");
            return 1;
    }

    return 0;
}


7. ---------------------- Zadanie 7 ----------------------

#include <stdio.h>
#include <stdlib.h>

int main() {
    // Menu
    printf("Choose an option:\n");
    printf("1. Create a .tar archive for the 'temp' folder\n");
    printf("2. Create a .zip archive for the 'temp' folder\n");
    printf("Enter your choice (1 or 2): ");

    int choice;
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            // Create a .tar archive for the 'temp' folder
            if (system("tar -cvf temp.tar temp") == 0) {
                printf("Archive temp.tar created successfully.\n");
            } else {
                fprintf(stderr, "Error creating archive temp.tar\n");
            }
            break;

        case 2:
            // Create a .zip archive for the 'temp' folder
            if (system("zip -r temp.zip temp") == 0) {
                printf("Archive temp.zip created successfully.\n");
            } else {
                fprintf(stderr, "Error creating archive temp.zip\n");
            }
            break;

        default:
            fprintf(stderr, "Invalid choice. Please enter 1 or 2.\n");
            return 1; // Return an error code
    }

    return 0;
}


9. ---------------------- Zadanie 9 ----------------------

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    // Create pipes
    int pipe1[2];
    int pipe2[2];

    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("Error creating pipes");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("Error forking");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        close(pipe1[1]); // Close write end of pipe1
        close(pipe2[1]); // Close write end of pipe2

        // Redirect stdin for the first file
        dup2(pipe1[0], STDIN_FILENO);
        close(pipe1[0]);

        // Redirect stdout for wc command
        dup2(pipe2[1], STDOUT_FILENO);
        close(pipe2[0]);

        // Execute the wc command to count words
        execlp("wc", "wc", "-w", (char *)NULL);
        perror("Error executing wc");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        close(pipe1[0]); // Close read end of pipe1
        close(pipe2[1]); // Close write end of pipe2

        // Open the files for reading
        FILE *file1 = fopen("file1.txt", "r");
        FILE *file2 = fopen("file2.txt", "r");

        if (!file1 || !file2) {
            perror("Error opening files");
            exit(EXIT_FAILURE);
        }

        char buffer[4096];
        size_t bytesRead;

        // Read from file1 and write to pipe1
        while ((bytesRead = fread(buffer, 1, sizeof(buffer), file1)) > 0) {
            write(pipe1[1], buffer, bytesRead);
        }

        // Close write end of pipe1
        close(pipe1[1]);

        // Read from file2 and write to pipe1
        while ((bytesRead = fread(buffer, 1, sizeof(buffer), file2)) > 0) {
            write(pipe1[1], buffer, bytesRead);
        }

        // Close write end of pipe1
        close(pipe1[1]);

        // Close file streams
        fclose(file1);
        fclose(file2);

        // Wait for the child process to finish
        wait(NULL);

        // Read from pipe2 to get the word count result
        char result[64];
        ssize_t count = read(pipe2[0], result, sizeof(result));

        if (count > 0) {
            result[count] = '\0';
            printf("The file with more words is: %s", result);
        } else {
            perror("Error reading from pipe");
        }

        // Close read end of pipe2
        close(pipe2[0]);
    }

    return 0;
}



8. ?---------------------- Zadanie 8 ----------------------


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <limits.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#define PIPE_NAME "/tmp/names_pipe"

// Function to find the longest or shortest name and write it to the FIFO
void find_and_write(const char *fifo_name, int (*compare)(size_t, size_t)) {
    mkfifo(fifo_name, 0666);

    int fifo_fd = open(fifo_name, O_WRONLY);
    if (fifo_fd == -1) {
        perror("Error opening FIFO");
        exit(EXIT_FAILURE);
    }

    DIR *dir = opendir("/path/to/your/home/directory");
    if (dir == NULL) {
        perror("Error opening the directory");
        exit(EXIT_FAILURE);
    }

    size_t result_length = compare(0, SIZE_MAX);
    char result_name[PATH_MAX];

    struct dirent *entry;

    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_REG || entry->d_type == DT_DIR) {
            size_t name_length = strlen(entry->d_name);

            if (compare(name_length, result_length)) {
                result_length = name_length;
                strcpy(result_name, entry->d_name);
            }
        }
    }

    closedir(dir);

    write(fifo_fd, result_name, strlen(result_name) + 1);

    close(fifo_fd);
}

int main() {
    pid_t child_pid;

    child_pid = fork();

    if (child_pid == -1) {
        perror("Error forking");
        exit(EXIT_FAILURE);
    } else if (child_pid == 0) {
        // Child process for finding the names
        find_and_write(PIPE_NAME, (int (*)(size_t, size_t))(&more_than));
        find_and_write(PIPE_NAME, (int (*)(size_t, size_t))(&less_than));
        exit(EXIT_SUCCESS);
    } else {
        // Parent process
        int status;
        waitpid(child_pid, &status, 0);

        // Read the results from the FIFO
        char longest_name[PATH_MAX];
        char shortest_name[PATH_MAX];

        int fifo_fd = open(PIPE_NAME, O_RDONLY);
        if (fifo_fd == -1) {
            perror("Error opening FIFO for reading");
            exit(EXIT_FAILURE);
        }

        read(fifo_fd, longest_name, sizeof(longest_name));
        read(fifo_fd, shortest_name, sizeof(shortest_name));

        close(fifo_fd);

        // Display the results
        printf("Longest name: %s\n", longest_name);
        printf("Shortest name: %s\n", shortest_name);

        // Remove the FIFO
        unlink(PIPE_NAME);
    }

    return 0;
}
